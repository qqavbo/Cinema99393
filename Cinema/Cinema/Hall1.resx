<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>